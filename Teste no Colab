{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM8CMu/vzUgfvG1QIRclsjz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/matheus489/An-lise-de-Desempenho/blob/main/Teste%20no%20Colab\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import tracemalloc\n",
        "\n",
        "# Função para ordenar uma lista de números usando Bubble Sort\n",
        "def bubble_sort(arr):\n",
        "    n = len(arr)\n",
        "    for i in range(n):\n",
        "        for j in range(0, n-i-1):\n",
        "            if arr[j] > arr[j+1]:\n",
        "                arr[j], arr[j+1] = arr[j+1], arr[j]\n",
        "    return arr\n",
        "\n",
        "# Função para ler números de um arquivo\n",
        "def read_numbers(file_name):\n",
        "    with open(file_name, 'r') as file:\n",
        "        numbers = [int(line.strip()) for line in file]\n",
        "    return numbers\n",
        "\n",
        "# Função para escrever números em um arquivo\n",
        "def write_numbers(file_name, numbers):\n",
        "    with open(file_name, 'w') as file:\n",
        "        for number in numbers:\n",
        "            file.write(f\"{number}\\n\")\n",
        "\n",
        "def main():\n",
        "    # Lê os números do arquivo de entrada\n",
        "    numbers = read_numbers('/content/arq (1).txt')\n",
        "\n",
        "    # Inicia a medição de memória\n",
        "    tracemalloc.start()\n",
        "    # Inicia a medição de tempo\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Ordena os números\n",
        "    sorted_numbers = bubble_sort(numbers)\n",
        "\n",
        "    # Termina a medição de tempo\n",
        "    end_time = time.time()\n",
        "    # Termina a medição de memória\n",
        "    current, peak = tracemalloc.get_traced_memory()\n",
        "    tracemalloc.stop()\n",
        "\n",
        "    # Escreve os números ordenados no arquivo de saída\n",
        "    write_numbers('arq-saida.txt', sorted_numbers)\n",
        "\n",
        "    # Imprime o tempo de execução e a memória utilizada\n",
        "    print(f\"Tempo de execução: {(end_time - start_time) * 1000:.2f} ms\")\n",
        "    print(f\"Memória utilizada: {peak / 1024:.2f} KB\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YN-As57siIta",
        "outputId": "ff1b4e30-8504-484e-84b2-f67e1fb84e90"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tempo de execução: 0.65 ms\n",
            "Memória utilizada: 0.59 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-TM4whtniH5G"
      },
      "outputs": [],
      "source": []
    }
  ]
}